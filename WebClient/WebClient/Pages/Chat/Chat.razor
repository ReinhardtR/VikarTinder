@page "/Chat/{ChatId:int}"
@using HttpClients.Services        
@using HttpClients
@using WebSockets
@using System.Security.Claims
@using WebClient.Utils
@inject ChatSocket ChatSocket
@inject ChatService ChatService
@inject JobConfirmationService JobConfirmationService
@inject ISnackbar Snackbar
@attribute [Authorize]

@if (chatHistory == null && loadingErrorLabel == null)
{
    <p>Loading...</p>
} 
else if (loadingErrorLabel != null)
{
    <p>Error: @loadingErrorLabel</p>
}
else if (chatHistory != null)
{
    @* vh based on the size of the appbar taking up the top part of the screen *@
    <MudStack Justify="Justify.Center" Spacing="4" Style="height: 80vh">
        <MudStack Row="@true" Spacing="4" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
            <MudStack Row="@true" Spacing="4" AlignItems="AlignItems.Center">
                <AuthorizeView Policy="@AuthPolicies.EmployerOnly">
                        <MudAvatar Size="Size.Medium" Color="Color.Secondary">@chatHistory.Substitute.FirstName[0]</MudAvatar>
                        <MudText Typo="Typo.h6">@chatHistory.Substitute.FirstName @chatHistory.Substitute.LastName</MudText>
                </AuthorizeView>
                
                <AuthorizeView Policy="@AuthPolicies.SubstituteOnly">
                        <MudAvatar Size="Size.Medium" Color="Color.Secondary">@chatHistory.Employer.FirstName[0]</MudAvatar>
                        <MudText Typo="Typo.h6">@chatHistory.Employer.FirstName @chatHistory.Employer.LastName</MudText>
                </AuthorizeView>
            </MudStack>

            <MudStack Row="@true" Spacing="4" AlignItems="AlignItems.Center">
                @if (jobConfirmation?.Status == JobConfirmationDTOStatus.ACCEPTED) {
                    <MudText Typo="Typo.h6" Color="Color.Success">JOB ER ACCEPTERET</MudText>
                } 
                else
                {
                    <AuthorizeView Policy="@AuthPolicies.EmployerOnly">
                        @if (jobConfirmation?.Status == JobConfirmationDTOStatus.UNANSWERED)
                        {
                            <MudText Typo="@Typo.h6" Color="@Color.Info">
                                JOB ANMODNING ER SENDT
                            </MudText>
                        }
                        else
                        {
                            <MudButton OnClick="@SendJobConfirmationRequest" Variant="@Variant.Outlined">
                                Send Job Anmodning
                            </MudButton>
                        }
                    </AuthorizeView>
                }
            </MudStack>
        </MudStack>
        
        <MudDivider Class="my-1" />
        
        <AuthorizeView Policy="@AuthPolicies.SubstituteOnly">
            @if (jobConfirmation?.Status == JobConfirmationDTOStatus.UNANSWERED)
            {
                <JobConfirmationRequest JobConfirmation="@jobConfirmation" />
                <MudDivider Class="my-1" />
            }
        </AuthorizeView>

        <AuthorizeView>
            <MudStack Reverse="@true" Class="overflow-y-scroll pa-4 flex-grow-1">
                <MudStack Spacing="4">
                    @foreach (MessageDTO message in chatHistory.Messages)
                    {
                        int userId = AuthClaims.GetUserId(context);
                        <ChatMessage UserId="@userId" AuthorId="@message.AuthorId" Content="@message.Content" SentAt="@message.CreatedAt" />
                    }
                </MudStack>
            </MudStack>
        </AuthorizeView>

        <EditForm Model="@formModel" OnValidSubmit="@HandleValidSubmit">
            <MudStack Row="@true" Spacing="2" Class="px-4" AlignItems="AlignItems.Start" Justify="Justify.Center">
                <MudTextField Label="Message" AutoFocus="@true" Variant="Variant.Outlined" @bind-Value="@formModel.Content" For="() => formModel.Content" />
                <MudIconButton Icon="@Icons.Filled.Send" Color="Color.Primary" Variant="Variant.Filled" ButtonType="ButtonType.Submit" Class="py-4 px-5 my-1" />
            </MudStack>
        </EditForm>
    </MudStack>
}

@code {
    
    [Parameter]
    public int ChatId { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;
    
    private JobConfirmationDTO? jobConfirmation;
    private ChatHistoryDTO? chatHistory;
    
    private string? loadingErrorLabel;

    protected override async Task OnInitializedAsync()
    {
        ChatHistoryDTO? newChatHistory = await ChatService.GetChatHistoryAsync(ChatId);
 
        if (newChatHistory == null)
        {
            loadingErrorLabel = "Couldn't load the chat history.";
            return;
        }
        
        chatHistory = newChatHistory;
        jobConfirmation = newChatHistory.JobConfirmation;

        await ChatSocket.ConnectAsync(ChatId);
        
        ListenToChatSocket();
        ListenToJobRequestSocket();
    }

    private class FormModel
    {
        private string _content = "";
        
        public string Content
        {
            get => _content.Trim();
            set => _content = value;
        }
    }

    private FormModel formModel = new();

    private async void ListenToChatSocket()
    {
        try
        {
            IAsyncEnumerable<MessageDTO> messages = ChatSocket.ListenToChatMessages();

            await foreach (MessageDTO message in messages)
            {
                chatHistory?.Messages.Add(message);
                StateHasChanged();
            }
        }
        catch (Exception e)
        {
            loadingErrorLabel = e.Message;
        }
        
        StateHasChanged();
    }
    
    private async void ListenToJobRequestSocket()
    {
        try
        {
            IAsyncEnumerable<JobConfirmationDTO> jobConfirmations = ChatSocket.ListenToJobConfirmations();
                
            await foreach (JobConfirmationDTO newJobConfirmation in jobConfirmations)
            {
                jobConfirmation = newJobConfirmation;

                switch (jobConfirmation.Status)
                {
                    case JobConfirmationDTOStatus.ACCEPTED:
                        Snackbar.Add("Job anmodningen er accepteret", Severity.Success);
                        break;
                    case JobConfirmationDTOStatus.DECLINED:
                        Snackbar.Add("Job anmodningen er afvist", Severity.Info);
                        break;
                    case JobConfirmationDTOStatus.UNANSWERED:
                        Snackbar.Add("Job anmodningen er sendt", Severity.Info);
                        break;
                    default:
                        throw new ArgumentOutOfRangeException();
                }
                
                StateHasChanged();
            }
        }
        catch (Exception e)
        {
            loadingErrorLabel = e.Message;
        }
        
        StateHasChanged();
    }

    private async void SendJobConfirmationRequest()
    {
        try
        {
            AuthenticationState authState = await AuthState;
            int userId = AuthClaims.GetUserId(authState);
            
            CreateJobConfirmationDTO createJobConfirmationDto = new()
            {
                ChatId = ChatId,
                EmployerId = userId,
                SubstituteId = chatHistory!.Substitute.Id
            };
            
            await JobConfirmationService.CreateJobConfirmationAsync(createJobConfirmationDto);
        }
        catch (Exception e)
        {
            Snackbar.Add("Kunne ikke sende job anmodningen", Severity.Error);
        }
        
        StateHasChanged();
    }
    
    private async void HandleValidSubmit()
    {
        try
        {
            if (formModel.Content == "")
            {
                return;
            }

            AuthenticationState authState = await AuthState;
            Claim? claim = AuthClaims.GetClaim(authState, AuthClaims.Id);
            if (claim == null) throw new Exception("Couldn't find the user id.");
            int userId = int.Parse(claim.Value);
            
            SendMessageDTO sendMessageDto = new()
            {
                ChatId = ChatId,
                AuthorId = userId,
                Content = formModel.Content
            };
            
            await ChatService.SendMessageAsync(sendMessageDto);

            formModel = new FormModel();
        }
        catch (Exception e)
        {
            Snackbar.Add("Kunne ikke sende beskeden.", Severity.Error);
        }
        
        StateHasChanged();
    }
}