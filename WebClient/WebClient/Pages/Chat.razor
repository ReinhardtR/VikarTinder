@page "/Chat/{ChatId:int}"
@using HttpClients.Services        
@using HttpClients
@using System.ComponentModel.DataAnnotations
@using WebSockets
@inject ChatService ChatService    

@if (chatHistory == null && errorLabel == null)
{
    <p>Loading...</p>
} else if (errorLabel != null)
{
    <p>Error: @errorLabel</p>
} else if (chatHistory != null)
{
    <div>
        <h1>Chat: @ChatId</h1>
        <div>
            <ul>
                @foreach (var message in chatHistory.Messages)
                {
                    <li>
                        <div>
                            <p>Author Id: @message.AuthorId</p>
                            <p>Message Id: @message.Id</p>
                            <p>Content: @message.Content</p>
                        </div>
                    </li>
                }
            </ul>
        </div>
        <EditForm Model="@formModel" OnValidSubmit="@HandleValidSubmit">
            <InputText id="content" @bind-Value="@formModel.Content"/>

            <button type="submit">Send</button>
        </EditForm>
    </div>
}

@code {
    
    [Parameter]
    public int ChatId { get; set; }
    
    private ChatHistoryDTO? chatHistory;
    private string? errorLabel;

    // TODO Hvis persistence ikke kører så kommer der ikke en error på client
    protected override async Task OnInitializedAsync()
    {
        ChatHistoryDTO newChatHistory = await ChatService.GetChatHistoryAsync(ChatId);

        if (newChatHistory == null)
        {
            throw new Exception("Chat not found");
        }
        
        chatHistory = newChatHistory;
        ListenToChatSocket();
    }

    private class FormModel
    {
        [Required]
        [StringLength(1000, MinimumLength = 1)]
        public string Content { get; set; } = "";
    }
    
    private FormModel formModel = new();

    private async void ListenToChatSocket()
    {
        try
        {
            ChatSocket chatSocket = new();
            IAsyncEnumerable<MessageDTO> messages = chatSocket.ConnectAsync(ChatId, CancellationToken.None);

            await foreach (MessageDTO message in messages)
            {
                chatHistory?.Messages.Add(message);
                StateHasChanged();
            }
        }
        catch (Exception e)
        {
            errorLabel = e.Message;
            StateHasChanged();
        }
    }
    
    private async void HandleValidSubmit()
    {
        try
        {
            // replace with auth stuff
            int authorId = 1;
            
            SendMessageDTO sendMessageDto = new()
            {
                ChatId = ChatId,
                AuthorId = authorId,
                Content = formModel.Content
            };
            
            MessageDTO messageDto = await ChatService.SendMessageAsync(sendMessageDto);
            
            // error handling?
        }
        catch (Exception e)
        {
            errorLabel = e.Message;
        }
        
        StateHasChanged();
    }
}