@page "/Chat/{ChatId:int}"
@using HttpClients.Services        
@using HttpClients
@using WebSockets
@inject ChatService ChatService    

@if (chatHistory == null && errorLabel == null)
{
    <p>Loading...</p>
} else if (errorLabel != null)
{
    <p>Error: @errorLabel</p>
} else if (chatHistory != null)
{
    @* vh based on the size of the appbar taking up the top part of the screen *@
    <MudStack Justify="Justify.Center" Spacing="4" Style="height: 80vh">
        <MudStack Row="@true" Spacing="4" AlignItems="AlignItems.Center">
            <MudAvatar Size="Size.Medium" Color="Color.Secondary">@chatName[0]</MudAvatar>
            <MudText Typo="Typo.h6">@chatName</MudText>
        </MudStack>
        
        <MudDivider Class="my-2" />
        
        @if (jobConfirmation != null)
        {
            <JobConfirmationRequest GigId="@GigId" ChatId="@ChatId" />
        }

        <MudStack Class="overflow-y-scroll pa-4 flex-grow-1 flex-column-reverse">
            <MudStack Spacing="4">
                @foreach (MessageDTO message in chatHistory.Messages)
                {
                    <ChatMessage UserId="@userId" AuthorId="@message.AuthorId" Content="@message.Content" />
                }
                <JobRequest ChatId="@ChatId" UserId="@userId" AuthorId="2" />
            </MudStack>
        </MudStack>

        <EditForm Model="@formModel" OnValidSubmit="@HandleValidSubmit">
            <MudStack Row="@true" Spacing="2" Class="px-4" AlignItems="AlignItems.Start" Justify="Justify.Center">
                <MudTextField Label="Message" AutoFocus="@true" Variant="Variant.Outlined" @bind-Value="@formModel.Content" For="() => formModel.Content" />
                <MudIconButton Icon="@Icons.Filled.Send" Color="Color.Primary" Variant="Variant.Filled" ButtonType="ButtonType.Submit" Class="py-4 px-5 my-1" />
            </MudStack>
        </EditForm>
    </MudStack>
}

@code {
    
    [Parameter]
    public int ChatId { get; set; }

    // TODO replace with auth stuff
    private int userId = 2;
    
    // TODO replace with data from server
    private string chatName = "John Doe";

    // TODO replace with data from server
    private int GigId = 1;
    
    private JobConfirmationDTO? jobConfirmation;
    private ChatHistoryDTO? chatHistory;
    private string? errorLabel;
    
    protected override async Task OnInitializedAsync()
    {
        ChatHistoryDTO newChatHistory = await ChatService.GetChatHistoryAsync(ChatId);
        chatHistory = newChatHistory;
        
        if (chatHistory == null)
        {
            errorLabel = "You are not a member of this chat";
            return;
        }
      
        ListenToChatSocket();
        ListenToJobRequestSocket();
    }

    private class FormModel
    {
        private string _content = "";
        
        public string Content
        {
            get => _content.Trim();
            set => _content = value;
        }
    }

    private FormModel formModel = new();

    private ChatSocket chatSocket = new();
    
    private async void ListenToChatSocket()
    {
        try
        {
            IAsyncEnumerable<MessageDTO> messages = chatSocket.ListenToChatMessages(ChatId);

            await foreach (MessageDTO message in messages)
            {
                chatHistory?.Messages.Add(message);
                StateHasChanged();
            }
        }
        catch (Exception e)
        {
            errorLabel = e.Message;
            StateHasChanged();
        }
    }
    
    private async void ListenToJobRequestSocket()
    {
        try
        {
            IAsyncEnumerable<JobConfirmationDTO> jobConfirmations = chatSocket.ListenToJobConfirmation(ChatId);
                
            await foreach (JobConfirmationDTO newJobConfirmation in jobConfirmations)
            {
                // TODO if job confirmation is answered set to null, else set it to the new job confirmation
                jobConfirmation = newJobConfirmation;
                StateHasChanged();
            }
        }
        catch (Exception e)
        {
            errorLabel = e.Message;
            StateHasChanged();
        }
    }
    
    private async void HandleValidSubmit()
    {
        try
        {
            if (formModel.Content == "")
            {
                return;
            }
            
            SendMessageDTO sendMessageDto = new()
            {
                ChatId = ChatId,
                AuthorId = userId,
                Content = formModel.Content
            };
            
            MessageDTO messageDto = await ChatService.SendMessageAsync(sendMessageDto);

            formModel = new FormModel();
            // error handling?
        }
        catch (Exception e)
        {
            errorLabel = e.Message;
        }
        
        StateHasChanged();
    }
}