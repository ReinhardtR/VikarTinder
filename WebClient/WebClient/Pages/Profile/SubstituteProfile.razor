@page "/vikar/{ProfileUserId:int}"
@using WebClient.Utils
@using HttpClients
@using HttpClients.Services
@inject AuthService AuthService
@attribute [Authorize]

@if (profile == null && errorLabel == null)
{
    <p>Loading...</p>
}
else if (errorLabel != null)
{
    <p>Error: @errorLabel</p>
}
else if (profile != null)
{
    <MudStack Spacing="4">
        <MudStack Spacing="2" Row="true" Justify="Justify.Center" AlignItems="AlignItems.Center">
            <MudAvatar Size="Size.Medium" Color="Color.Secondary">@profile.FirstName[0]</MudAvatar>
            <MudText Typo="Typo.h6">@profile.FirstName @profile.LastName</MudText>
        </MudStack>

        <MudStack Spacing="1">
            <MudText Typo="Typo.caption">Bio</MudText>
            <MudPaper Width="100%" Class="pa-4">
                <MudText>@profile.Bio</MudText>
            </MudPaper>
        </MudStack>
        
        <MudStack Spacing="4">
            <MudText>@(DateTime.Today.Year - profile.BirthDate.Year) Ã¥r gammel</MudText>
            <MudText>@profile.Address</MudText>
        </MudStack>
    </MudStack>
}

@code {

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }
    
    [Parameter]
    public int ProfileUserId { get; set; }

    private SubstituteInfoDTO? profile;
    private string? errorLabel;
    private bool isEditable = false;
    
    protected override async Task OnInitializedAsync()
    {
        await GetProfileAsync();
    }

    private async Task GetProfileAsync()
    {
        try
        {
            profile = await AuthService.GetSubstituteInfoAsync(ProfileUserId);

            AuthenticationState authState = await AuthState;
            int currentUserId = AuthClaims.GetUserId(authState);

            isEditable = currentUserId == ProfileUserId;
        }
        catch
        {
            errorLabel = "Der skete en fejl";
        }
    }

}