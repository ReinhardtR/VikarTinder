@page "/log-ind"
@using Microsoft.AspNetCore.Components
@using System.ComponentModel.DataAnnotations
@using System.Security.Claims
@using HttpClients.Services.Interfaces
@inject IAuthService AuthService

<PageTitle>Log Ind</PageTitle>

<MudPaper Class="pa-16 mx-auto" MaxWidth="600px">
    <AuthorizeView>
        <NotAuthorized Context="Auth">
            <EditForm Model="formModel" OnValidSubmit="OnValidSubmit">
                <DataAnnotationsValidator/>
            
                <MudStack Spacing="6">
                    <MudTextField Label="Email" Variant="Variant.Outlined" @bind-Value="formModel.Email" For="() => formModel.Email"/>
                    <MudTextField Label="Password" Variant="Variant.Outlined" InputType="InputType.Password" @bind-Value="formModel.Password" For="() => formModel.Password"/>
            
                    <MudButton Color="Color.Primary" Variant="Variant.Filled" ButtonType="ButtonType.Submit">Log ind</MudButton>
            
                    @if (apiError != null)
                    {
                        <MudAlert Severity="Severity.Error">
                            @apiError
                        </MudAlert>
                    }
                </MudStack>
            </EditForm>
        </NotAuthorized>
        
        <Authorized>
            <MudText>Du er allerede logget ind.</MudText>
        </Authorized>
    </AuthorizeView>
</MudPaper>


@code {
    [CascadingParameter] 
    public Task<AuthenticationState> AuthState { get; set; }
    
    public class FormModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; }

        [Required]
        [StringLength(100, MinimumLength = 6, ErrorMessage = "Password skal v√¶re mellem 6 og 100 tegn.")]
        // [RegularExpression("/^(?=.*[A-Z])/", ErrorMessage = "Password skal indeholde et stort bogstav")] // Minimum 1 uppercase
        public string Password { get; set; }
    }

    private FormModel formModel = new();
    private string? apiError;
    
    private async void OnValidSubmit()
    {
        apiError = null;

        try
        {
            await AuthService.LoginAsync(formModel.Email, formModel.Password);
            
            // temporary checks if the user is logged in
            AuthenticationState state = await AuthState;
            ClaimsPrincipal principal = state.User;
 
            foreach (Claim principalClaim in principal.Claims)
            {
                Console.WriteLine($"Name: {principalClaim.Type}, Value: {principalClaim.Value}");
            }
        }
        catch (Exception e)
        {
            apiError = e.Message;
        }

        StateHasChanged();
    }
}