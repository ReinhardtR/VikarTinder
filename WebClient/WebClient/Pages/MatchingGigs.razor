@page "/Matching/Gigs"
@using HttpClients.Services
@using HttpClients
@inject MatchingService MatchingService
@attribute [Authorize]

<h3>Gigs</h3>
<div>
    <MudGrid Justify="Justify.Center" Spacing="2">
        <MudItem xs="12" Class="d-flex align-content-center justify-content-center">
            <MudPaper Class="represent">
                <MudPaper Class="infoBox">
                    @if (errorLabel != null && !isLoading)
                    {
                        <MudText Color="Color.Error">@errorLabel</MudText>   
                    }
                    else if (isLoading)
                    {
                        <MudText Class="infoText">
                            <MudProgressCircular Color="Color.Secondary" Size="Size.Large" Indeterminate="true"/>
                        </MudText>
                    }
                    else if (gigs.Count > 0)
                    {
                        <MudText Class="infoText">@gigs.Peek().Id</MudText>
                    }
                    else
                    {
                        <MudText Class="infoText">Ikke flere muligheder</MudText>
                    }
                </MudPaper>
                <MudItem Class="d-flex align-content-center justify-content-center matchBtns">
                    <MudButton Variant="Variant.Filled" Size="Size.Large" Color="Color.Success" OnClick="() => SendGigMatchRequestAsync(true)">JA</MudButton>
                    <MudButton Variant="Variant.Filled" Size="Size.Large" Color="Color.Error" OnClick="() => SendGigMatchRequestAsync(false)">NEJ</MudButton>
                </MudItem>
            </MudPaper>
        </MudItem>
    </MudGrid>
</div>

@code {
    // TODO: replace with auth stuff
    private int userId = 1; 
    
    private Stack<GigMatchingDTO> gigs = new();
    private bool isLoading = true;
    private string? errorLabel;

    protected override async Task OnInitializedAsync()
    {
        await GetGigsAsync();
    }

    private async Task GetGigsAsync()
    {
        isLoading = true;
        
        try
        {
            GigMatchingDTOs gigsResult = await MatchingService.GetGigsAsync(userId);
            
            gigsResult.PossibleMatches.ToList().ForEach((g) => gigs.Push(g));
        }
        catch
        {
            errorLabel = "Der skete en fejl";
        }
        
        isLoading = false;
        StateHasChanged();
    }
    
    private async void SendGigMatchRequestAsync(bool wantsToMatch)
    {
        GigMatchingDTO gig = gigs.Pop();
        
        await MatchingService.SendGigsMatchRequestAsync(new MatchRequestDTO()
        {
            CurrentUser = userId,
            MatchId = gig.Id,
            WantsToMatch = wantsToMatch
        });
        
        StateHasChanged();
    }
}

