@page "/Matching/Gigs"
@using HttpClients.Services
@using HttpClients
@inject MatchingService MatchingService;

<h3>Gigs</h3>
<div>
    <MudGrid Justify="Justify.Center" Spacing="2">
        <MudItem xs="12" Class="d-flex align-content-center justify-content-center">
            <MudPaper Class="represent">
                <MudPaper class="infoBox">
                    @if (_isWaiting)
                    {
                        <MudText Class="infoText">
                            <MudProgressCircular Color="Color.Secondary" Size="Size.Large" Indeterminate="true"/>
                        </MudText>
                    }else
                    {
                        @if (_areStillGigsToMatch)
                        {
                            <MudText Class="infoText">@_currentDateId</MudText>
                        }
                        else
                        {
                            <MudText Class="infoText">@_somethingIsWrongText</MudText>
                        }
                    }
                </MudPaper>
                <MudItem Class="d-flex align-content-center justify-content-center matchBtns">
                    <MudButton Variant="Variant.Filled" Size="Size.Large" Color="Color.Success" @onclick="@(e => SendGigMatchRequest(true))">JA</MudButton>
                    <MudButton Variant="Variant.Filled" Size="Size.Large" Color="Color.Error" @onclick="@(e => SendGigMatchRequest(true))">NEJ</MudButton>
                </MudItem>
            </MudPaper>
        </MudItem>
    </MudGrid>

</div>
@code {
    private readonly int _userId = 1; 
    private int _currentDateId;
    private Stack<GigMatchingDTO> _gigs = new ();
    private bool _areStillGigsToMatch = true;
    private bool _isWaiting = true;
    private string _somethingIsWrongText;

    protected override async Task OnInitializedAsync()
    {
        GetGigsAsync();
    }

    private async void SendGigMatchRequest(bool wantToMatch)
    {
        await MatchingService.SendGigsMatchRequestAsync(new MatchRequestDTO()
        {
            CurrentUser = _userId,
            MatchId = _currentDateId,
            WantToMatch = wantToMatch
        });
        NextMatch();
        StateHasChanged();
    }

    private void NextMatch()
    {
        if (_gigs.Count == 0)
            GetGigsAsync();
        if (_areStillGigsToMatch)
            _currentDateId = _gigs.Pop().Id;
    }

    private async void GetGigsAsync()
    {
        _isWaiting = true;
        try
        {
            GigMatchingDTOs gigsAsync = await MatchingService.GetGigsAsync(new GigSearchParametersDTO
            {
                CurrentSubstituteId = _userId
            });
            foreach (var gigMatchingDTO in gigsAsync.PossibleMatches)
            {
                _gigs.Push(gigMatchingDTO);
            }
            if (_gigs.Count == 0)
            {
                _areStillGigsToMatch = false;
                _somethingIsWrongText = "No more matches";
            }else
                _currentDateId = _gigs.Pop().Id;
        }
        catch (Exception e)
        {
            _areStillGigsToMatch = false;
            _somethingIsWrongText = "Connection issues";
        }
        _isWaiting = false;
        StateHasChanged();
    }
    
}

<style>
    .represent{
    width: 95%;
    }
    
    .infoBox {
    width: 90%;
    height: auto;
    margin-left: auto;
    margin-right: auto;
    margin-top: 5%;
    
    }
    
    .infoText {
    font-size: 500%;
    padding: 5%;
    text-align: center;
    }
    
    .matchBtns {
    margin: 1em;
    }
</style>

