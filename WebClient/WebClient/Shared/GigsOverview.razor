@using HttpClients.Services
@using WebClient.Utils
@using HttpClients
@inject ChatService ChatService

@if (gigsDto == null && errorLabel == null)
{
    <p>Loading...</p>
}
else if (errorLabel != null)
{
    <p>Error: @errorLabel</p>
}
else if (gigsDto != null)
{
    <MudStack>
        <MudText Typo="Typo.h6">Dine stillinger</MudText>
        <MudGrid>
            @foreach (GigDTO gig in gigsDto.Gigs)
            {
                <MudItem xs="6">
                    <MudButton FullWidth="true" OnClick="() => OnGigSelected(gig)">
                        <MudPaper Width="100%" Class="py-12">
                            <MudStack Justify="Justify.Center" AlignItems="AlignItems.Center">
                                <MudText Typo="Typo.h6">@gig</MudText>
                            </MudStack>
                        </MudPaper>
                    </MudButton>
                </MudItem>
            }
        </MudGrid>
    </MudStack>
}

@code {
    
    [Parameter]
    public Action<GigDTO> OnGigSelected { get; set; }
    
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }
    
    private EmployerGigsDTO? gigsDto;
    private string? errorLabel; 
    
    protected override async Task OnInitializedAsync()
    {
        await FetchGigs();
    }

    private async Task FetchGigs()
    {
        try
        {
            errorLabel = null;

            AuthenticationState authState = await AuthState;
            int userId = AuthClaims.GetUserId(authState);
            gigsDto = await ChatService.GetEmployerGigsAsync(userId);
        }
        catch (Exception e)
        {
            gigsDto = null;
            
            errorLabel = e.Message;
        }
    }
}