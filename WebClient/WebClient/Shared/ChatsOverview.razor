@using HttpClients
@using HttpClients.Services
@using WebClient.Utils
@using System.Security.Claims
@inject ChatService ChatService
@inject NavigationManager NavigationManager

@if (chats == null && errorLabel == null)
{
    <p>Loading...</p>
} 
else if (errorLabel != null)
{
    <p>Error: @errorLabel</p>
} 
else if (chats != null)
{
    <MudStack AlignItems="AlignItems.Stretch" Style="width: 100%" >
        <MudText Typo="Typo.h6">Chats</MudText>

        <AuthorizeView Policy="@AuthPolicies.EmployerOnly">
            <MudStack Spacing="2">
                @foreach (BasicChatDTO chat in chats)
                {
                    <MudButton OnClick="() => NavigateToChat(chat.Id)" FullWidth="@true">
                        <MudPaper class="ma-1" Width="100%">
                            <MudStack Row="true" Class="pa-4">
                                <MudAvatar Color="Color.Secondary">@chat.SubstituteId</MudAvatar>
                                <MudStack Justify="Justify.Center" Spacing="0">
                                    <MudText Typo="Typo.body1">@chat.SubstituteId</MudText>
                                    <MudText Typo="Typo.body2">example@gmail.com</MudText>
                                </MudStack>
                            </MudStack>
                        </MudPaper>
                    </MudButton>
                }
            </MudStack>
        </AuthorizeView>
        
         <AuthorizeView Policy="@AuthPolicies.SubstituteOnly">
            <MudStack Spacing="2">
                @foreach (BasicChatDTO chat in chats)
                {
                    <MudButton OnClick="() => NavigateToChat(chat.Id)" FullWidth="@true">
                        <MudPaper class="ma-1" Width="100%">
                            <MudStack Row="true" Class="pa-4">
                                <MudAvatar Color="Color.Secondary">@chat.EmployerId</MudAvatar>
                                <MudStack Justify="Justify.Center" Spacing="0">
                                    <MudText Typo="Typo.body1">@chat.EmployerId</MudText>
                                    <MudText Typo="Typo.body2">example@gmail.com</MudText>
                                </MudStack>
                            </MudStack>
                        </MudPaper>
                    </MudButton>
                }
            </MudStack>
        </AuthorizeView>
    </MudStack>
}

@code {
    
    [Parameter]
    public int? GigId { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;
    
    private ICollection<BasicChatDTO>? chats;
    private string? errorLabel;
    
    protected override async Task OnInitializedAsync()
    {
        await FetchChats();
    }

    private async Task FetchChats()
    {
        try
        {
            errorLabel = null;

            ChatOverviewDTO? chatOverview;

            AuthenticationState authState = await AuthState;
            int userId = AuthClaims.GetUserId(authState);

            if (GigId == null)
            {
                chatOverview = await ChatService.GetChatOverviewByUserAsync(userId);
            }
            else
            {
                chatOverview = await ChatService.GetChatOverviewByGigAsync(GigId.Value);
            }

            if (chatOverview == null)
            {
                throw new Exception("Something went wrong.");
            }

            chats = chatOverview.Chats;
        }
        catch (Exception e)
        {
            chats = null;
            
            errorLabel = e.Message;
        }
    }

    private void NavigateToChat(int chatToGoTo)
    {
        NavigationManager.NavigateTo($"/chat/{chatToGoTo}");
    }
}